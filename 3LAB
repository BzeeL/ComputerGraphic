#include <glut.h>
#include <math.h>


GLfloat pos_sphere[] = {0,5,0};

float xOct= 0.5;
float yOct = xOct;
float zOct = xOct;

float angle = 0;

GLfloat light_position[] = { 0.0, 0, 0.0, 1 };

void octaiderUp(float xOct, float yOct, float zOct)
{
	glBegin(GL_TRIANGLES); //1-я четверть
	glColor3ub(251, 255, 0);//Жёлтый

	glNormal3f(1,yOct+1,1);
	glVertex3f(0, yOct, 0); 

	glNormal3f(xOct+1, 1, 1);
	glVertex3f(xOct, 0, 0);
			
	glNormal3f(-1, -1, -zOct-1);
	glVertex3f(0, 0, -zOct);
	glEnd();


	glBegin(GL_TRIANGLES); //2-я четверть 
	glColor3ub(68, 255, 0); //Зел
	glNormal3f(1, yOct+1, 1);
	glVertex3f(0, yOct, 0);

	glNormal3f(1, 1, -zOct -1);
		glVertex3f(0, 0, -zOct);

		glNormal3f(-xOct-1, 1, 1);
		glVertex3f(-xOct, 0, 0);
	glEnd();


	glBegin(GL_TRIANGLES); // 3-я четверть  ПЕРЕД
	glColor3ub(255, 0, 0); //красеый
	glNormal3f(1, 1+ yOct, 1);
		glVertex3f(0, yOct, 0);

		glNormal3f(xOct-1, 1, 1);
		glVertex3f(-xOct, 0, 0);

		glNormal3f(1, 1, 1+zOct);
		glVertex3f(0, 0, zOct);
	glEnd();

	 
	glBegin(GL_TRIANGLES); ////4-я четверсть ПЕРЕД
	glColor3ub(255, 100, 0); //оранж
	glNormal3f(1, 1.5, 1);
		glVertex3f(0, yOct, 0);

		glNormal3f(1, 1, 1.5);
		glVertex3f(0, 0, zOct);

		glNormal3f(1.5, 1, 1);
		glVertex3f(xOct, 0, 0);
	glEnd();
}

void octaiderDown(float xOct, float yOct, float zOct) {

	glBegin(GL_TRIANGLES); //2-я чет фиолет
	glColor3ub(157, 0, 255); 
	glVertex3f(0, -yOct, 0);
	glVertex3f(0, 0, -zOct);
	glVertex3f(-xOct, 0, 0);
	glEnd();

	glBegin(GL_TRIANGLES); //3-я четверть МУЛЬТИЦВЕТ

	glColor3ub(87, 0, 42); 

	glVertex3f(0, -yOct, 0);

		glColor3ub(0, 81, 87);
		glVertex3f(-xOct, 0, 0);
			glColor3ub(7, 87, 0);
			glVertex3f(0, 0, zOct);
	glEnd();

	glBegin(GL_TRIANGLES); //1-я чет
	glColor3ub(0, 26, 255);
	glVertex3f(0, -yOct, 0);
	glVertex3f(xOct, 0, 0);
	glVertex3f(0, 0, -zOct);
	glEnd();


	glBegin(GL_TRIANGLES);
	glColor3ub(105, 235, 240); //4-я чет   
	glVertex3f(0, -yOct, 0);
	glVertex3f(0, 0, zOct);
	glVertex3f(xOct, 0, 0);
	glEnd();
	
}


void lightOnScene() {

	glClearColor(0, 0, 0, 1);
	glEnable(GL_LIGHTING);
	glLightModelf(GL_LIGHT_MODEL_TWO_SIDE, GL_TRUE);
	glEnable(GL_NORMALIZE);
}


void lightOnScene_ON() {
	glEnable(GL_LIGHT0);
	glEnable(GL_COLOR_MATERIAL);

	light_position[0] = cosf(angle);
	light_position[2] = sinf(angle);

				//Позиция источника
	GLfloat light_ambient[] = { 0.1, 0.1, 0.1 };			//цвет фона источника
	GLfloat light_diffuse[] = { 1, 1, 1 };			// рассеивание источника
	
	glLightfv(GL_LIGHT0, GL_POSITION, light_position);
	glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse);



	GLfloat material_amient[] = { 0.0, 0.0, 0.0 };
	GLfloat material_diffuse[] = { 0.6, 0.6, 0.6};
	GLfloat material_specular[] = { 0.1, 0.1, 0.1 };
	GLfloat mat_emission[] = { 0.3, 0.3, 0.3, 1 };

	glMaterialfv(GL_LIGHT0, GL_AMBIENT, material_amient);
	glMaterialfv(GL_LIGHT0, GL_DIFFUSE, material_diffuse);
	glMaterialfv(GL_LIGHT0, GL_SPECULAR, material_specular);


}

void drawSphere() {
	glLoadIdentity();
	glutWireSphere(0.4, 12, 10);
}


void display()
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	lightOnScene_ON();
	octaiderUp(xOct, yOct, zOct);
	octaiderDown(xOct, yOct, zOct);

	//glMatrixMode(GL_MODELVIEW);
	//glLoadIdentity();
	//gluLookAt(0, 0, 1, 0, 0, 0, 0, 1, 0);
	

	glEnable(GL_LIGHT0);
	glutPostRedisplay();
	glutSwapBuffers();
	angle += 0.001;
}


int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGBA);
	glutInitWindowPosition(100, 50);
	glutInitWindowSize(600, 600);
	glutCreateWindow("OCTA");
	lightOnScene();


	
	glutDisplayFunc(display);	


	glutMainLoop();
	return 0;
}
