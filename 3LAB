#include <glut.h>
#include <math.h>


GLfloat pos_sphere[] = {0,5,0};
//GLfloat pos_sphere[] = { 0,0,0 };











float xOct= 0.7;
float yOct = xOct;
float zOct = xOct;


void octaiderUp(float xOct, float yOct, float zOct)
{
	glBegin(GL_TRIANGLES); // зел
	glColor3ub(251, 255, 0);

		glVertex3f(0, yOct, 0); //1-я четверть
		glVertex3f(xOct, 0, 0);
		glVertex3f(0, 0, -zOct);
	glEnd();


	glBegin(GL_TRIANGLES);

	glColor3ub(68, 255, 0); //2-я четверть жёл

		glVertex3f(0, yOct, 0);
		glVertex3f(0, 0, -zOct);
		glVertex3f(-xOct, 0, 0);
	glEnd();


	glBegin(GL_TRIANGLES);

	glColor3ub(255, 0, 0); //3-я четверть красеый

		glVertex3f(0, yOct, 0);
		glVertex3f(-xOct, 0, 0);
		glVertex3f(0, 0, zOct);
	glEnd();

	 
	glBegin(GL_TRIANGLES); //4-я четверсть оранж

	glColor3ub(255, 100, 0);

		glVertex3f(0, yOct, 0);
		glVertex3f(0, 0, zOct);
		glVertex3f(xOct, 0, 0);
	glEnd();
}

void octaiderDown(float xOct, float yOct, float zOct) {

	glBegin(GL_TRIANGLES); //2-я чет фиолет
	glColor3ub(157, 0, 255); 
	glVertex3f(0, -yOct, 0);
	glVertex3f(0, 0, -zOct);
	glVertex3f(-xOct, 0, 0);
	glEnd();

	glBegin(GL_TRIANGLES); //3-я четверть МУЛЬТИЦВЕТ
	
	glColor3ub(87, 0, 42); 
	glVertex3f(0, -yOct, 0);
		glColor3ub(0, 81, 87);
		glVertex3f(-xOct, 0, 0);
			glColor3ub(7, 87, 0);
			glVertex3f(0, 0, zOct);
	glEnd();

	glBegin(GL_TRIANGLES);
	glColor3ub(105, 235, 240); //4-я чет   
	glVertex3f(0, -yOct, 0);
	glVertex3f(0, 0, zOct);
	glVertex3f(xOct, 0, 0);
	glEnd();
	
	glBegin(GL_TRIANGLES); //1-я чет
	glColor3ub(0, 26, 255); 
	glVertex3f(0, -yOct, 0);
	glVertex3f(xOct, 0, 0);
	glVertex3f(0, 0, -zOct);
	glEnd();

}


//
//
//

void lightOnScene() {

	GLfloat light_diffuse[] = { 1.0, 1.0, 1.0, 1.0 };

	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glLightModelf(GL_LIGHT_MODEL_TWO_SIDE, GL_TRUE);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse);

}



//void buttonControl(int button,)







void display()
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);


	octaiderUp(xOct, yOct, zOct);
	octaiderDown(xOct, yOct, zOct);


	//glMatrixMode(GL_MODELVIEW);
	//glLoadIdentity();
	//gluPerspective(15, 1, 0.1, 15);

	//gluLookAt(1, 0, 0, 0, 0, 0, 0, 1, 0);
	//glLoadIdentity();

	//glMatrixMode(GL_PROJECTION);
	//glFrustum(-1, 1, -1, 1, 3, 10);		//видовые параметры
	




	//glLightfv(GL_LIGHT0, GL_POSITION, pos_sphere);





	glutPostRedisplay();
	glutSwapBuffers();
}


int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGBA);
	glutInitWindowPosition(100, 50);
	glutInitWindowSize(600, 600);
	glutCreateWindow("OCTA");


	
	glutDisplayFunc(display);	

	//lightOnScene();

	glutMainLoop();
	return 0;
}
