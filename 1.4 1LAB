#include <glut.h>
#include <math.h>

bool day = true;

float x_position = -0.75;
float y_position = 0.75;
float radius = 0.14;
int segments = 50;

float speed = 0.0008;

int G_DaySky = 177;
int B_DaySky = 217;
int G_NightSky = 0;
int B_NightSky = 40;

int G_Sky = G_DaySky;
int B_Sky = B_DaySky;

int G_DayGround = 186;
int B_DayGround = 6;
int G_NightGround = 40;
int B_NightGround = 0;

int G_Ground = G_DayGround;
int B_Ground = B_DayGround;

int R_DayWall = 140;
int G_DayWall = 70;
int R_NightWall = 50;
int G_NightWall = 20;

int R_Wall = R_DayWall;
int G_Wall = G_DayWall;


void renderSky(int& G_Sky, int& B_Sky) {
    glBegin(GL_POLYGON);
    glColor3ub(0, G_Sky, B_Sky);
    glVertex2f(-5, -0.25);
    glVertex2f(-5, 5);
    glVertex2f(5, 5);
    glVertex2f(5, -0.25);
    glEnd();
}

void renderGround(int& G_Ground, int& B_Ground) {
    glBegin(GL_POLYGON);
    glColor3ub(0, G_Ground, B_Ground);
    glVertex2f(-5, -0.25);  //
    glVertex2f(-5, -5);     //
    glVertex2f(5, -5);      //
    glVertex2f(5, -0.25);   //
    glEnd();
}

void renderHouse(int &R_Wall, int &G_Wall) {
    glBegin(GL_POLYGON);  // WALLS
    glColor3ub(R_Wall, G_Wall, 0);
    glVertex2f(-0.25, 0);
    glVertex2f(-0.25, -0.5);
    glVertex2f(0.25, -0.5);
    glVertex2f(0.25, 0);
    glEnd();

    glBegin(GL_POLYGON);  // WINDOW
    glColor3ub(37, 26, 9);
    glVertex2f(-0.1, 0.1);
    glVertex2f(-0.1, -0.1);
    glVertex2f(0.1, -0.1);
    glVertex2f(0.1, 0.1);
    glEnd();

    glBegin(GL_TRIANGLES);  // ROOF
    glColor3ub(128, 0, 0);
    glVertex2f(-0.45, 0);
    glVertex2f(0.45, 0);
    glVertex2f(0, 0.25);
    glEnd();

    // glBegin(GL_POLYGON); ---- проверка окна
    // glColor3ub(1, 1, 1);
    // glVertex2f(-1, 1);
    // glVertex2f(-0.9, -0.9);
    // glVertex2f(0.9, -0.9);
    // glVertex2f(0.9, 0.9);
    // glEnd();
}

void renderSun(float& x_position, float& y_position, float& radius,
    int& amountSegments) {
    glBegin(GL_POLYGON);
    glColor3ub(255, 215, 0);
    for (int i = 0; i < amountSegments; i++) {
        float angle = 2.0 * 3.1415926 * float(i) / float(amountSegments);

        float dx = radius * cosf(angle);
        float dy = radius * sinf(angle);

        glVertex2f(x_position + dx, y_position + dy);
    }
    glEnd();
    x_position += speed;
}

void renderMoon(float& x_position, float& y_position, float& radius,
    int& amountSegments) {
    glBegin(GL_POLYGON);
    glColor3ub(192.f, 192.f, 192.f);
    for (int i = 0; i < amountSegments; i++) {
        float angle = 2.0 * 3.1415926 * float(i) / float(amountSegments);

        float dx = radius * cosf(angle);
        float dy = radius * sinf(angle);

        glVertex2f(x_position + dx, y_position + dy);
    }
    glEnd();
    x_position += speed;
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    renderSky(G_Sky, B_Sky);
    renderGround(G_Ground, B_Ground);
    renderHouse(R_Wall, G_Wall);

    switch (day) {
    case true:
        renderSun(x_position, y_position, radius, segments);

        if (x_position >= 1 + radius) {
            day = false;
            x_position = -1 - radius;
            G_Sky = G_NightSky;
            B_Sky = B_NightSky;
            G_Ground = G_NightGround;
            B_Ground = B_NightGround;
            R_Wall = R_NightWall;
            G_Wall = G_NightWall;
        }
        break;
    case false:
        renderMoon(x_position, y_position, radius, segments);

        if (x_position >= 1 + radius) {
            G_Sky = G_DaySky;
            B_Sky = B_DaySky;
            G_Ground = G_DayGround;
            B_Ground = B_DayGround;
            R_Wall = R_DayWall;
            G_Wall = G_DayWall;
            day = true;
            x_position = -1 - radius;
        }
        break;
    }

    glutPostRedisplay();
    glutSwapBuffers();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGBA);
    glutInitWindowPosition(100, 50);
    glutInitWindowSize(400, 400);
    glutCreateWindow("House");
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
