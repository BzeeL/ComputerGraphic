#include <glut.h>
#include<math.h>
#include<thread>
#include<chrono>
//#include<Windows.h>
//using namespace std::this_thread;

void renderSky() {
	glBegin(GL_POLYGON);
	glColor3ub(0, 177, 217);
	glVertex2f(-5, -0.25);
	glVertex2f(-5, 5);
	glVertex2f(5, 5);
	glVertex2f(5, -0.25);
	glEnd();
}

void renderGround() {
	glBegin(GL_POLYGON);
	glColor3ub(0, 186, 6);
	glVertex2f(-5,-0.25); //
	glVertex2f(-5,-5 ); //
	glVertex2f(5, -5); //
	glVertex2f(5, -0.25); //
	glEnd();
}

void renderHouse() {
	glBegin(GL_POLYGON); //WALLS
	glColor3ub(139, 69, 19);
	glVertex2f(-0.25, 0);
	glVertex2f(-0.25, -0.5);
	glVertex2f(0.25, -0.5);
	glVertex2f(0.25, 0);
	glEnd();


	glBegin(GL_POLYGON); //WINDOW
	glColor3ub(37, 26, 9);
	glVertex2f(-0.1, 0.1);
	glVertex2f(-0.1, -0.1);
	glVertex2f(0.1, -0.1);
	glVertex2f(0.1, 0.1);
	glEnd();


	glBegin(GL_TRIANGLES); //ROOF
	glColor3ub(128, 0, 0);
	glVertex2f(-0.45, 0);
	glVertex2f(0.45, 0);
	glVertex2f(0, 0.25);
	glEnd();
}

void renderSun(float x, float y, float r, int amountSegments)
{	
	glBegin(GL_POLYGON);
	glColor3ub(255, 215, 0);
	for (int i = 0; i < amountSegments; i++)
	{
		float angle = 2.0 * 3.1415926 * float(i) / float(amountSegments);

		float dx = r * cosf(angle);
		float dy = r * sinf(angle);

		glVertex2f(x + dx, y + dy);
	}
	x += 0.0001;
	glEnd();

}

void renderMoon(float x, float y, float r, int amountSegments) {

	glBegin(GL_POLYGON);
	glColor3ub(192, 192, 192);
	for (int i = 0; i < amountSegments; i++)
	{
		float angle = 2.0 * 3.1415926 * float(i) / float(amountSegments);

		float dx = r * cosf(angle);
		float dy = r * sinf(angle);

		glVertex2f(x + dx, y + dy);
	}
	glEnd();
}

void mainPicture() {
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	renderSky();
	renderSun(-0.75, 0.75, 0.14, 80); //x,y,r, kol-vo vershin
	//renderMoon(-0.75, 0.75, 0.14, 80);
	renderGround();
	renderHouse();
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glutSwapBuffers();
}



int main(int argc, char** argv) {

	// Инициализация GLUT
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGBA);
	glutInitWindowPosition(100, 50);
	glutInitWindowSize(400, 400);
	glutCreateWindow("House");
	glutDisplayFunc(mainPicture);

	glutMainLoop();

	return 0;
}
