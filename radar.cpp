#include <iostream>
using namespace std;

int i, j;
int Square = 0;
int NumberTarget = 0;

int Map[16][16] = { {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                     {1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0},
                     {1,0,1,0,0,1,0,0,0,0,1,1,0,0,0,0},
                     {1,1,0,0,1,1,1,0,0,0,1,1,0,0,0,0},
                     {0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0},
                     {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
                     {1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
                     {1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
                     {1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0},
                     {1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0},
                     {1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0},
                     {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
                     {0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0},
                     {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0},
                     {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
                     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1} };




void FindTarget(int i, int j);
void FindRight(int i, int j);
void FindUp(int i, int j);
void FindLeft(int i, int j);
void FindDown(int i, int j);


void FindTarget(int i, int j) {
    Map[i][j] = 0;
    Square++;

    if (j != 15) {
        if (Map[i][j + 1] == 1) {
            //->
            FindRight(i,j+1);
        }
    }

    if (i != 0) {
        if (Map[i - 1][j] == 1) {
            //  ^
            FindUp(i-1,j);
        }
    }

    if (j != 0) {
        if (Map[i][j - 1] == 1) {// <-
            FindLeft(i,j-1);
        }
    }

    if (i != 15) {
        if (Map[i + 1][j] == 1) {// ->
            FindDown(i+1,j);
        }
    }
}

void FindRight(int i, int j) {
    Map[i][j] = 0;
    Square++;
    
    if (j != 15) {
        if (Map[i][j + 1] == 1) {
            FindRight(i,j+1);
        }
    }

    if (i != 0) {
        if (Map[i - 1][j] == 1) {
            FindUp(i-1,j);
        }
    }

    if (i != 15) {
        if (Map[i + 1][j] == 1) {
            FindDown(i+1,j);
        }
    }


}

void FindUp(int i, int j) {
    Square++;
    Map[i][j] = 0;

    if (i != 0) {
        if (Map[i - 1][j] == 1) {
            FindUp(i-1,j);
        }
    }

    if (j != 15) {
        if (Map[i][j + 1] == 1) {
            FindRight(i,j+1);
        }
    }

    if (j != 0) {
        if (Map[i][j - 1] == 1) {
            FindLeft(i,j-1);
        }
    }


}

void FindLeft(int i, int j) {
    Square++;
    Map[i][j] = 0;

    if (j != 0) {
        if (Map[i][j - 1] == 1) {
            FindLeft(i,j-1);
        }
    }

    if (i != 0) {
        if (Map[i - 1][j] == 1) {
            FindUp(i-1,j);
        }
    }

    if (i != 15) {
        if (Map[i + 1][j] == 1) {
            FindDown(i+1,j);
        }
    }



}

void FindDown(int i, int j) {
    Square++;
    Map[i][j] = 0;

    if (i != 15) {
        if (Map[i + 1][j] == 1) {
            FindDown(i+1,j);
        }
    }

    if (j != 15) {
        if (Map[i][j + 1] == 1) {
            FindRight(i,j+1);
        }
    }

    if (i != 0) {
        if (Map[i][j - 1] == 1) {
            FindLeft(i,j-1);
        }
    }


}







int main()
{
    /*  int Map[16][16] = { {0,0,1,1,1,0,0,1,1,0,1,1,0,1,0,1},
                     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} };
My map */

/*
      int Map[16][16] = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0},
                         {1,0,1,0,0,1,0,0,0,0,1,1,0,0,0,0},
                         {1,1,0,0,1,1,1,0,0,0,1,1,0,0,0,0},
                         {0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
                         {1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
                         {1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
                         {1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0},
                         {1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0},
                         {1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0},
                         {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1} };

Den Map





*/



    for (int i = 0; i < 16; i++) {
        for (int j = 0; j < 16; j++) {
            if (Map[i][j] == 1) {
                FindTarget(i,j);
                if ((Square > 0) && (Square < 3)) {
                    cout << "Target #" << NumberTarget + 1 << " is noise" << endl;
                    NumberTarget++;
                }
                else if ((Square > 2) && (Square < 5)) {
                    cout << "Target #" << NumberTarget + 1 << " is enemy" << endl;
                    NumberTarget++;
                }
                else if (Square > 4) {
                    cout << "Target #" << NumberTarget + 1 << " is ground" << endl;
                    NumberTarget++;
                }
                Square = 0;
            }
        }
    }

    
    return 0;
}
